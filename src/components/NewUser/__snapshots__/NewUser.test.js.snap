// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`NewUser should correctly match the snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <NewUser />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <label>
          First Name:
          <input
            name="firstName"
            onChange={[Function]}
            type="text"
            value=""
          />
        </label>,
        <label>
          Last Name:
          <input
            name="lastName"
            onChange={[Function]}
            type="text"
            value=""
          />
        </label>,
        <label>
          email:
          <input
            name="email"
            onChange={[Function]}
            type="text"
            value=""
          />
        </label>,
        <label>
          Password:
          <input
            name="password"
            onChange={[Function]}
            type="text"
            value=""
          />
        </label>,
        <label>
          Confirm Password:
          <input
            name="confirmPassword"
            onChange={[Function]}
            type="text"
            value=""
          />
        </label>,
      ],
      "className": "new-user-form",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            "First Name:",
            <input
              name="firstName"
              onChange={[Function]}
              type="text"
              value=""
            />,
          ],
        },
        "ref": null,
        "rendered": Array [
          "First Name:",
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "name": "firstName",
              "onChange": [Function],
              "type": "text",
              "value": "",
            },
            "ref": null,
            "rendered": null,
            "type": "input",
          },
        ],
        "type": "label",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            "Last Name:",
            <input
              name="lastName"
              onChange={[Function]}
              type="text"
              value=""
            />,
          ],
        },
        "ref": null,
        "rendered": Array [
          "Last Name:",
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "name": "lastName",
              "onChange": [Function],
              "type": "text",
              "value": "",
            },
            "ref": null,
            "rendered": null,
            "type": "input",
          },
        ],
        "type": "label",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            "email:",
            <input
              name="email"
              onChange={[Function]}
              type="text"
              value=""
            />,
          ],
        },
        "ref": null,
        "rendered": Array [
          "email:",
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "name": "email",
              "onChange": [Function],
              "type": "text",
              "value": "",
            },
            "ref": null,
            "rendered": null,
            "type": "input",
          },
        ],
        "type": "label",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            "Password:",
            <input
              name="password"
              onChange={[Function]}
              type="text"
              value=""
            />,
          ],
        },
        "ref": null,
        "rendered": Array [
          "Password:",
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "name": "password",
              "onChange": [Function],
              "type": "text",
              "value": "",
            },
            "ref": null,
            "rendered": null,
            "type": "input",
          },
        ],
        "type": "label",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            "Confirm Password:",
            <input
              name="confirmPassword"
              onChange={[Function]}
              type="text"
              value=""
            />,
          ],
        },
        "ref": null,
        "rendered": Array [
          "Confirm Password:",
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "name": "confirmPassword",
              "onChange": [Function],
              "type": "text",
              "value": "",
            },
            "ref": null,
            "rendered": null,
            "type": "input",
          },
        ],
        "type": "label",
      },
    ],
    "type": "form",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <label>
            First Name:
            <input
              name="firstName"
              onChange={[Function]}
              type="text"
              value=""
            />
          </label>,
          <label>
            Last Name:
            <input
              name="lastName"
              onChange={[Function]}
              type="text"
              value=""
            />
          </label>,
          <label>
            email:
            <input
              name="email"
              onChange={[Function]}
              type="text"
              value=""
            />
          </label>,
          <label>
            Password:
            <input
              name="password"
              onChange={[Function]}
              type="text"
              value=""
            />
          </label>,
          <label>
            Confirm Password:
            <input
              name="confirmPassword"
              onChange={[Function]}
              type="text"
              value=""
            />
          </label>,
        ],
        "className": "new-user-form",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              "First Name:",
              <input
                name="firstName"
                onChange={[Function]}
                type="text"
                value=""
              />,
            ],
          },
          "ref": null,
          "rendered": Array [
            "First Name:",
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "name": "firstName",
                "onChange": [Function],
                "type": "text",
                "value": "",
              },
              "ref": null,
              "rendered": null,
              "type": "input",
            },
          ],
          "type": "label",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              "Last Name:",
              <input
                name="lastName"
                onChange={[Function]}
                type="text"
                value=""
              />,
            ],
          },
          "ref": null,
          "rendered": Array [
            "Last Name:",
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "name": "lastName",
                "onChange": [Function],
                "type": "text",
                "value": "",
              },
              "ref": null,
              "rendered": null,
              "type": "input",
            },
          ],
          "type": "label",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              "email:",
              <input
                name="email"
                onChange={[Function]}
                type="text"
                value=""
              />,
            ],
          },
          "ref": null,
          "rendered": Array [
            "email:",
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "name": "email",
                "onChange": [Function],
                "type": "text",
                "value": "",
              },
              "ref": null,
              "rendered": null,
              "type": "input",
            },
          ],
          "type": "label",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              "Password:",
              <input
                name="password"
                onChange={[Function]}
                type="text"
                value=""
              />,
            ],
          },
          "ref": null,
          "rendered": Array [
            "Password:",
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "name": "password",
                "onChange": [Function],
                "type": "text",
                "value": "",
              },
              "ref": null,
              "rendered": null,
              "type": "input",
            },
          ],
          "type": "label",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              "Confirm Password:",
              <input
                name="confirmPassword"
                onChange={[Function]}
                type="text"
                value=""
              />,
            ],
          },
          "ref": null,
          "rendered": Array [
            "Confirm Password:",
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "name": "confirmPassword",
                "onChange": [Function],
                "type": "text",
                "value": "",
              },
              "ref": null,
              "rendered": null,
              "type": "input",
            },
          ],
          "type": "label",
        },
      ],
      "type": "form",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;
